import numpy as np
from .r_cluster import RCluster

class RStateCluster (RCluster):

    def __init__ (self, train_loop):

        # # mean
        # mean_state_val = np.array([ -9.68598106e-01,   3.25322488e+00,   1.15492153e+02,  -7.73964172e-02,
        #   -4.93288354e-01,  -3.04550728e-01,   2.02396414e+01,   7.78644828e+00,
        #   -1.40848188e+01,   5.21044837e+01,   6.81640135e+01,   9.92519843e+01,
        #    1.67415998e+02,   4.79298636e+00,   5.20701363e+00,   6.67787789e+01,
        #    6.20081236e+02,   1.92472566e+02,   7.81227890e+00,   7.82360210e+00,
        #    7.83286681e+00,   7.83313082e+00,   7.84205591e+00,   7.84467256e+00,
        #    7.85324462e+00,   7.83530968e+00,   7.84648663e+00,   7.85728664e+00,
        #    7.86971036e+00,   7.88312884e+00,   7.87945734e+00,   7.87890947e+00,
        #    7.88511957e+00,   7.88434505e+00,   7.90709722e+00,   7.91009147e+00,
        #    7.92466483e+00,   7.91586352e+00,   7.92051861e+00,   7.91325854e+00,
        #    7.89421839e+00,   7.88841190e+00,   7.86377230e+00,   7.85670582e+00,
        #    7.85120567e+00,   7.83435818e+00,   7.84360324e+00,   7.83125342e+00,
        #    7.82028011e+00,   7.81539890e+00])
        #
        # # std
        # std_state_val = np.array([   6.7814906,     6.51841476,   58.336629,      6.92270709,    7.19908347,
        #     8.16615134,   14.50648649,   30.02888699,   81.35120915,   84.91361024,
        #    81.84430588,  130.46135741,  158.72764331,    3.5411655,     3.5411655,
        #    91.32905863,  587.27710614,  202.20077609,    3.27762233,    3.273159,
        #     3.27153641,    3.27129419,    3.26825926,    3.26369679,    3.25954828,
        #     3.25839391,    3.25399892,    3.25169006,    3.24643393,    3.24153244,
        #     3.23896586,    3.2375762,     3.23685959,    3.23111739,    3.22084038,
        #     3.21580092,    3.20578636,    3.20701272,    3.20729729,    3.21228574,
        #     3.22174723,    3.23108254,    3.24141328,    3.24771884,    3.25428626,
        #     3.26193757,    3.25960468,    3.26759304,    3.27114271,    3.27775181])

        # mean
        mean_state_val = np.array([ -9.91094807e-01,   4.04397432e+00,   1.18570263e+02,   4.85119310e-02,
          -1.17633480e+00,   2.80916121e-01,   2.71084327e+01,   1.30711486e+00,
          -1.35111957e+01,   6.16494148e+01,   6.15442854e+01,   1.13181974e+02,
           1.74726260e+02,   4.59646256e+00,   5.40353744e+00,   8.62242525e+01,
           9.26962797e+02,   8.42374498e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01,   1.00000000e+01,   1.00000000e+01,
           1.00000000e+01,   1.00000000e+01])

        # std
        std_state_val = np.array([   6.34989679,    6.50713558,   58.42703764,    6.77954808,    7.25614297,
            9.28145132,   13.85985825,   20.48117915,   77.27791489,   86.70378938,
           79.13440726,  131.80763287,  159.7680845,     3.52965696,    3.52965696,
          130.51479761,  616.38111237,   94.06026717,    0.,            0.,            0.,
            0.,            0.,            0.,            0.,            0.,            0.,
            0.,            0.,            0.,            0.,            0.,            0.,
            0.,            0.,            0.,            0.,            0.,            0.,
            0.,            0.,            0.,            0.,            0.,            0.,
            0.,            0.,            0.,            0.,            0.        ])


        super().__init__(
            train_loop,
            50, # map_side_size,
            # (-10.0, 10.0), # amplitude
            mean_state_val,
            std_state_val,
            train_loop.observation_size, # input_dim,
            # train_loop.dequeued_next_states, # samples_tensor,
            train_loop.inp_next_states,
            'state_clusters' # scope
        )

    #     self.train_loop = train_loop
    #     self.map_side_size = 40
    #     self.input_dim = train_loop.observation_size
    #
    #     self.som = SOM(
    #         (self.input_dim,),
    #         self.map_side_size,
    #         1,
    #         train_loop.sess,
    #         train_loop.dequeued_next_states,
    #         alpha_learning_rate=0.01
    #     )
    #
    # def get_train_ops (self):
    #     return [self.som.get_train_op (), self.som.get_centroids_op ()]

    def process_outputs (self):
        # image_grid = np.reshape(self.train_loop.store_outputs [6], [self.map_side_size, self.map_side_size, self.input_dim])[:,:,5:8]
        # self.show_centroids (image_grid)
        pass
